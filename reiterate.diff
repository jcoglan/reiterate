Index: src/prototype.js
===================================================================
--- src/prototype.js	(revision 8376)
+++ src/prototype.js	(working copy)
@@ -35,6 +35,6 @@
 
 <%= include 'enumerable.js', 'array.js', 'number.js', 'hash.js', 'range.js' %>
 
-<%= include 'ajax.js', 'dom.js', 'selector.js', 'form.js', 'event.js', 'deprecated.js' %>
+<%= include 'ajax.js', 'dom.js', 'selector.js', 'form.js', 'event.js', 'deprecated.js', 'reiterate.js' %>
 
 Element.addMethods();
Index: src/reiterate.js
===================================================================
--- src/reiterate.js	(revision 0)
+++ src/reiterate.js	(revision 0)
@@ -0,0 +1,217 @@
+// This file contains patches for Prototype that allow its iterator methods to use a much more
+// concise syntax, similar to that offered by Symbol#to_proc and Methodphitamine in Ruby.
+//
+// A #toFunction method is added to Array, Hash and String, and a selection of Enumerable
+// methods are patched to take advantage of the new syntax. See this Rails ticket for more info:
+//
+// http://dev.rubyonrails.org/ticket/9611
+//
+// Patches are applied unobtrusively to the objects and methods that require them by renaming
+// existing methods and intercepting calls to them, so we can convert the iterator argument to
+// a function before passing it on to the original method. This has been tested against Prototype
+// edge and includes methods defined in Prototype 1.6.0 if they are available.
+
+Function.from = function(iterator) {
+  if (iterator.toFunction) return iterator.toFunction();
+  if (typeof iterator == 'function') return iterator;
+  if (typeof iterator == 'object') return Function.fromObject(iterator);
+  return function(x) { return x; };
+};
+
+Function.OPERATORS = {
+  '+'   : function(x) { return this + x; },
+  '-'   : function(x) { return this - x; },
+  '*'   : function(x) { return this * x; },
+  '/'   : function(x) { return this / x; },
+  '%'   : function(x) { return this % x; },
+  '<'   : function(x) { return this < x; },
+  '<='  : function(x) { return this <= x; },
+  '>'   : function(x) { return this > x; },
+  '>='  : function(x) { return this >= x; },
+  '=='  : function(x) { return this.valueOf() == x; },
+  '!='  : function(x) { return this.valueOf() != x; },
+  '===' : function(x) { return this.valueOf() === x; },
+  '!==' : function(x) { return this.valueOf() !== x; },
+  '&&'  : function(x) { return this.valueOf() && x; },
+  '&'   : function(x) { return this & x; },
+  '||'  : function(x) { return this.valueOf() || x; },
+  '|'   : function(x) { return this | x; },
+  'typeof': function(x) { return typeof this.valueOf() == x; },
+  'instanceof': function(x) { return this instanceof x; }
+};
+
+String.prototype.toFunction = function() {
+  var properties = this.split('.');
+  if (!properties[0]) return function(x) { return x; };
+  return function(o) {
+    var object, member = o, key;
+    for (var i = 0, n = properties.length; i < n; i++) {
+      key = properties[i];
+      object = member;
+      member = object[key];
+      if (typeof member == 'function') member = member.apply(object);
+    }
+    return member;
+  };
+};
+
+Array.prototype.toFunction = function() {
+  var method = this[0], args = this.slice(1), op;
+  if (!method) return function(x) { return x; };
+  if (op = Function.OPERATORS[method]) method = op;
+  return function(o) {
+    var fn = (typeof method == 'function') ? method : o[method];
+    return (typeof fn == 'function') ? fn.apply(o, args) : undefined;
+  };
+};
+
+Function.fromObject = function(object) {
+  var keys = [];
+  for (var field in object) { if (object.hasOwnProperty(field)) keys.push(field); }
+  if (keys.length === 0) return function(x) { return x; };
+  return function(o) {
+    var result = true, key, fn, args, op;
+    for (var i = 0, n = keys.length; i < n; i++) {
+      key = keys[i];
+      fn = o[key]; args = object[key];
+      if (op = Function.OPERATORS[key]) fn = op;
+      if (typeof fn == 'function' && !(args instanceof Array)) args = [args];
+      result = result && ((typeof fn == 'function') ? fn.apply(o, args) : fn == args);
+    }
+    return result;
+  };
+};
+
+Hash.prototype.toFunction = function() {
+  return Function.fromObject(this._object || this);
+};
+
+Function.ChainCollector = function() {
+  var CLASS = arguments.callee;
+  
+  this.then = this.and = this;
+  var queue = [], baseObject = arguments[0];
+  
+  this.____ = function(method, args) {
+    queue.push({func: method, args: args});
+  };
+  
+  this.fire = function(base) {
+    var object = base || baseObject, method, property;
+    for (var i = 0, n = queue.length; i < n; i++) {
+      method = queue[i];
+      if (object instanceof CLASS) {
+        object.____(method.func, method.args);
+        continue;
+      }
+      property = object[method.func];
+      object = (typeof property == 'function')
+          ? property.apply(object, method.args)
+          : property;
+    }
+    return object;
+  };
+  
+  this.toFunction = function() {
+    var chain = this;
+    return function(o) { return chain.fire(o); };
+  };
+};
+
+Function.ChainCollector.addMethods = function(object) {
+  var methods = [], property, i, n, name;
+  var self = this.prototype;
+  
+  var reservedNames = [], blank = new this();
+  for (property in blank) reservedNames.push(property);
+  var re = new RegExp('^(?:' + reservedNames.join('|') + ')$');
+  
+  for (property in object) {
+    if (Number(property) != property)
+      methods.push(property);
+  }
+  if (object instanceof Array) {
+    for (i = 0, n = object.length; i < n; i++) {
+      if (typeof object[i] == 'string')
+        methods.push(object[i]);
+    }
+  }
+  for (i = 0, n = methods.length ; i < n; i++)
+    (function(name) {
+      if (re.test(name)) return;
+      self[name] = function() {
+        this.____(name, arguments);
+        return this;
+      };
+    })(methods[i]);
+  
+  if (object.prototype)
+    this.addMethods(object.prototype);
+};
+
+Function.ALL_METHODS = [
+  "__defineGetter__", "__defineSetter__", "__lookupGetter__", "__lookupSetter__", "abbr", 
+  "abs", "accept", "acceptCharset", "accesskey", "acos", "action", "align", "alink", "alt", 
+  "apply", "archive", "arity", "asin", "atan", "atan2", "axis", "background", "bgcolor", 
+  "border", "call", "caller", "ceil", "cellpadding", "cellspacing", "char", "charAt", 
+  "charCodeAt", "charoff", "charset", "checked", "cite", "className", "classid", "clear", 
+  "code", "codebase", "codetype", "color", "cols", "colspan", "compact", "concat", "content", 
+  "coords", "cos", "data", "datetime", "declare", "defer", "dir", "disabled", "enctype", 
+  "every", "exec", "exp", "face", "filter", "floor", "forEach", "frame", "frameborder", 
+  "fromCharCode", "getDate", "getDay", "getFullYear", "getHours", "getMilliseconds", 
+  "getMinutes", "getMonth", "getSeconds", "getTime", "getTimezoneOffset", "getUTCDate", 
+  "getUTCDay", "getUTCFullYear", "getUTCHours", "getUTCMilliseconds", "getUTCMinutes", 
+  "getUTCMonth", "getUTCSeconds", "getYear", "global", "hasOwnProperty", "headers", "height", 
+  "href", "hreflang", "hspace", "htmlFor", "httpEquiv", "id", "ignoreCase", "index", 
+  "indexOf", "innerHTML", "input", "isPrototypeOf", "ismap", "join", "label", "lang", "language", 
+  "lastIndex", "lastIndexOf", "length", "link", "log", "longdesc", "map", "marginheight", 
+  "marginwidth", "match", "max", "maxlength", "media", "method", "min", "multiline", 
+  "multiple", "name", "nohref", "noresize", "noshade", "now", "nowrap", "object", "onblur", 
+  "onchange", "onclick", "ondblclick", "onfocus", "onkeydown", "onkeypress", "onkeyup", 
+  "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", 
+  "onreset", "onselect", "onsubmit", "onunload", "parse", "pop", "pow", "profile", "prompt", 
+  "propertyIsEnumerable", "push", "random", "readonly", "reduce", "reduceRight", "rel", 
+  "replace", "rev", "reverse", "round", "rows", "rowspan", "rules", "scheme", "scope", 
+  "scrolling", "search", "selected", "setDate", "setFullYear", "setHours", "setMilliseconds", 
+  "setMinutes", "setMonth", "setSeconds", "setTime", "setUTCDate", "setUTCFullYear", 
+  "setUTCHours", "setUTCMilliseconds", "setUTCMinutes", "setUTCMonth", "setUTCSeconds", 
+  "setYear", "shape", "shift", "sin", "size", "slice", "some", "sort", "source", "span", 
+  "splice", "split", "sqrt", "src", "standby", "start", "style", "substr", "substring", 
+  "summary", "tabindex", "tan", "target", "test", "text", "title", "toExponential", 
+  "toFixed", "toGMTString", "toLocaleDateString", "toLocaleFormat", "toLocaleString", 
+  "toLocaleTimeString", "toLowerCase", "toPrecision", "toSource", "toString", "toUTCString", 
+  "toUpperCase", "type", "unshift", "unwatch", "usemap", "valign", "value", "valueOf", 
+  "valuetype", "version", "vlink", "vspace", "watch", "width"
+];
+
+[Array, Date, Element.Methods, Element.Methods.Simulated, Enumerable, Event,
+    Form, Form.Element, Function, Hash, Number, Object, ObjectRange, Position,
+    String, Template].each(function(object) {
+  var property;
+  for (property in object) Function.ALL_METHODS.push(property);
+  for (property in object.prototype || {}) Function.ALL_METHODS.push(property);
+});
+
+Function.ALL_METHODS = Function.ALL_METHODS.uniq().sort();
+Function.ChainCollector.addMethods(Function.ALL_METHODS);
+
+var it = its = function() {
+  return new Function.ChainCollector();
+};
+
+[Enumerable, Array.prototype, Hash.prototype, ObjectRange.prototype,
+Ajax.Responders, Element.ClassNames.prototype].each(function(object) {
+  $w('each all any collect detect findAll max min partition reject sortBy map find select filter every some').each(function(method) {
+    if (!object[method]) { return; }
+    var wrapped = object[method];
+    object[method] = function() {
+      var args = $A(arguments);
+      if (args[0]) args[0] = Function.from(args[0]);
+      return wrapped.apply(this, args);
+    };
+  });
+  
+  object.count = function(iterator, context) {
+    return this.findAll(iterator, context).length;
+  };
+});
Index: test/unit/enumerable.html
===================================================================
--- test/unit/enumerable.html	(revision 8376)
+++ test/unit/enumerable.html	(working copy)
@@ -32,6 +32,10 @@
 </tbody>
 </table>
 
+<div style="display: block;" class="finder"></div>
+<div style="display: none;" class="finder"></div>
+<div style="display: inline;" class="finder"></div>
+
 <!-- Tests follow -->
 <script type="text/javascript" language="javascript" charset="utf-8">
 // <![CDATA[
@@ -45,6 +49,20 @@
     
     Nicknames: $w('sam- noradio htonl Ulysses'),
     
+    Radios: [
+      {checked: true}, {checked: false}, {checked: 1}, {checked: true},
+      {checked: ''}, {checked: 17}, {checked: null}, {checked: 'foo'}
+    ],
+    
+    Records: [
+      {valid: function() { return this.name == 'Bob'; }, name: 'Mike'},
+      {valid: function() { return this.name == 'Bob'; }, name: 'Bob'}
+    ],
+    
+    Values: [{value: 12}, {value: -5}, {value: 9}, {value: 6}],
+    
+    Nested: [{value: {integer: 12}}, {value: {integer: -5}}, {value: {integer: 9}}, {value: {integer: 6}}],
+    
     Basic: [1, 2, 3],
     
     Primes: [
@@ -108,6 +126,43 @@
         return value == this.target_value;
       }, { target_value: 2 }));
     }},
+    
+    testBinaryOperators: function() {with(this) {
+      assertEqual('3, 3', [9, 3, 1, 7, 8, 5, 3, 0].findAll(['==', 3]).join(', '));
+      assertEqual('9, 7, 8', [9, 3, 1, 7, 8, 5, 3, 0].findAll(['>', 5]).join(', '));
+      assertEqual('19, 13, 21, 15, 17', [7, 1, 9, 3, 5].map(['+', 12]).join(', '));
+      assertEqual('2, 7, 3, 6', [8, 28, 12, 24].map(['/', 4]).join(', '));
+      
+      assertEqual('7, 8, 5', [9, 3, 1, 7, 8, 5, 3, 0].findAll({'>': 3, '<=': 8}).join(', '));
+      assertEqual('1, 3, 1, 3, 0, 1, 3, 0', [9, 3, 1, 7, 8, 5, 3, 0].map(['%', 4]).join(', '));
+      
+      assertEqual('13, ruby, foo, 77, foo, foo',
+        [13, 'ruby', '', 77, false, 0].map(['||', 'foo']).join(', '));
+      
+      var object = {foo: 'bar'};
+      var stuff = [8,2,'sandwich',4,4.2,object,'4',4,''];
+      
+      assertEqual('4, 4', stuff.findAll(['===', 4]).join(', '));
+      assertEqual('4, 4, 4', stuff.findAll(['==', 4]).join(', '));
+      
+      assertEqual('sandwich, 4, ', stuff.findAll(['instanceof', String]).join(', '));
+      assertEqual(1, stuff.findAll(['==', 'sandwich']).length);
+      assertEqual(1, stuff.findAll(['===', '4']).length);
+      
+      assertEqual('bar', stuff.find(['typeof', 'object']).foo);
+      assertEqual('bar', stuff.find(['==', object]).foo);
+      
+      assertEqual('8, 2, 4, 4.2, 4', stuff.findAll({'instanceof': Number}).join(', '));
+      assertEqual('4, 4', stuff.findAll({'instanceof': Number, '==': 4}).join(', '));
+      assertEqual('2', stuff.findAll({'instanceof': Number, '<=': 3}).join(', '));
+    }},
+    
+    testCount: function() {with(this) {
+      assertEqual(7, $R(9,24).count({'>': 12, '<=': 19}));
+      this.prop = "reiterate";
+      var words = $w('could I please just reiterate slowly');
+      assertEqual(1, words.count(function(w) { return w == this.prop; }, this));
+    }},
 
     testAny: function() {with(this) {
       assert(!([].any()));
@@ -122,6 +177,8 @@
       assert(!Fixtures.Basic.any(function(value) {
         return value > 5;
       }));
+      assert(Fixtures.Radios.any('checked'));
+      assert(Fixtures.Records.any('valid'));
     }},
     
     testAll: function() {with(this) {
@@ -137,6 +194,9 @@
       assert(!Fixtures.Basic.all(function(value) {
         return value > 1;
       }));
+      assert([{checked: true}, {checked: 12}, {checked: 'foo'}].all('checked'));
+      assert(!Fixtures.Radios.all('checked'));
+      assert(!Fixtures.Records.all('valid'));
     }},
     
     testCollect: function() {with(this) {
@@ -146,6 +206,24 @@
         }).join(", "));
       
       assertEqual(26,  Fixtures.Primes.map().length);
+      
+      assertEqual(Fixtures.Nicknames.join(', '),
+        Fixtures.People.collect('nickname').join(', '));
+      
+      assertEqual(Fixtures.Values.pluck('value').join(', '),
+        Fixtures.Nested.collect('value.integer').join(', '));
+      
+      var set = Fixtures.Values.collect(function(v) {
+        return {
+          value: function() { return {quantity: this.k}; },
+          k: v.value
+        };
+      });
+      assertEqual(Fixtures.Values.pluck('value').join(', '),
+        set.collect('value.quantity').join(', '));
+      
+      assertEqual('plums, apples, oranges',
+        ['apples', 'oranges', 'plums'].sortBy({replace: [/^./, '']}).join(', '));
     }},
     
     testDetect: function() {with(this) {
@@ -153,6 +231,9 @@
         Fixtures.People.detect(function(person) {
           return person.nickname.match(/no/);
         }).name);
+      assertEqual(true, Fixtures.Radios.detect('checked').checked);
+      assertEqual(true, Fixtures.Radios.detect(it().checked()).checked);
+      assertEqual('Bob', Fixtures.Records.detect('valid').name);
     }},
     
     testEachSlice: function() {with(this) {
@@ -181,6 +262,15 @@
     testFindAll: function() {with(this) {
       assertEqual(Fixtures.Primes.join(', '),
         Fixtures.Z.findAll(prime).join(', '));
+      assertEqual(5, Fixtures.Radios.findAll('checked').length);
+      assertEqual(2, $$('div.finder').findAll('visible').length);
+      
+      assertEqual(3, $$('div').findAll(['hasClassName', 'finder']).length);
+      assertEqual(3, $$('div').findAll({hasClassName: ['finder']}).length);
+      assertEqual(3, $$('div').findAll(it().hasClassName('finder')).length);
+      assertEqual(2, $$('div').findAll({hasClassName: 'finder', visible: true}).length);
+      assertEqual(3, $$('div').findAll({hasClassName: ['finder'], tagName: 'DIV'}).length);
+      assertEqual(0, $$('div').findAll({hasClassName: ['finder'], tagName: 'SPAN'}).length);
     }},
     
     testGrep: function() {with(this) {
@@ -257,12 +347,15 @@
       assertEqual(97, Fixtures.Primes.max());
       assertEqual(2, [ -9, -8, -7, -6, -4, -3, -2,  0, -1,  2 ].max());
       assertEqual('sam-', Fixtures.Nicknames.max()); // ?s > ?U
+      assertEqual(12, Fixtures.Values.max('value'));
+      assertEqual(12, Fixtures.Values.max(its().value()));
     }},
     
     testMin: function() {with(this) {
       assertEqual(1, Fixtures.Z.min());
       assertEqual(0, [  1, 2, 3, 4, 5, 6, 7, 8, 0, 9 ].min());
       assertEqual('Ulysses', Fixtures.Nicknames.min()); // ?U < ?h
+      assertEqual(-5, Fixtures.Values.min('value'));
     }},
     
     testPartition: function() {with(this) {
@@ -273,6 +366,10 @@
       assertEqual(2, result.length);
       assertEqual('sam-, htonl', result[0].join(', '));
       assertEqual('noradio, Ulysses', result[1].join(', '));
+      
+      result = Fixtures.Radios.partition('checked');
+      assertEqual(5, result[0].length);
+      assertEqual(3, result[1].length);
     }},
     
     testPluck: function() {with(this) {
@@ -284,6 +381,12 @@
       assertEqual(0, 
         Fixtures.Nicknames.reject(Prototype.K).length);
         
+      assertEqual(3,
+        Fixtures.Radios.reject('checked').length);
+        
+      assertEqual(1,
+        Fixtures.Records.reject('valid').length);
+        
       assertEqual('sam-, noradio, htonl',
         Fixtures.Nicknames.reject(function(nickname) {
           return nickname != nickname.toLowerCase();
@@ -295,6 +398,9 @@
         Fixtures.People.sortBy(function(value) {
           return value.nickname.toLowerCase();
         }).pluck('nickname').join(', '));
+        
+      assertEqual('-5, 6, 9, 12',
+        Fixtures.Values.sortBy(its().value()).map('value').join(', '));
     }},
     
     testToArray: function() {with(this) {
